/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.25).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.vcompany.restaurant.api.controller;

import com.vcompany.restaurant.api.model.Error;
import com.vcompany.restaurant.api.model.Restaurant;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-03-28T18:50:22.197436-03:00[America/Sao_Paulo]")
@Validated
public interface RestaurantsApi {

    Logger log = LoggerFactory.getLogger(RestaurantsApi.class);

    default Optional<ObjectMapper> getObjectMapper(){
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest(){
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @Operation(summary = "Returns a list of restaurants.", description = "It enables the search for restaurants based on specific parameters.", tags={ "Restaurant" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "it returns a list of resturants based on the parameters provided.", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Restaurant.class)))),

            @ApiResponse(responseCode = "400", description = "it is returned when a 400 error happens.", content = @Content(schema = @Schema(implementation = Error.class))),

            @ApiResponse(responseCode = "200", description = "it is returned when a 500 error happens.", content = @Content(schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/restaurants",
            produces = { "application/json", "applcation/json" },
            method = RequestMethod.GET)
    default ResponseEntity<List<Restaurant>> findRestaurants(@Size(max=100) @Parameter(in = ParameterIn.QUERY, description = "the restaurnt name (complete or partial) that will be searched." ,schema=@Schema()) @Valid @RequestParam(value = "name", required = false) String name, @Min(1) @Max(5) @Parameter(in = ParameterIn.QUERY, description = "the customer rating the restaurnt should have." ,schema=@Schema(allowableValues={  }, minimum="1", maximum="5"
    )) @Valid @RequestParam(value = "rating", required = false) Integer rating, @Min(1) @Max(10) @Parameter(in = ParameterIn.QUERY, description = "the restaurant distance in miles." ,schema=@Schema(allowableValues={  }, minimum="1", maximum="10"
    )) @Valid @RequestParam(value = "distance", required = false) Integer distance, @Parameter(in = ParameterIn.QUERY, description = "the average price by one person in dollar." ,schema=@Schema()) @Valid @RequestParam(value = "price", required = false) Double price, @Size(max=100) @Parameter(in = ParameterIn.QUERY, description = "the kind of cuisine offered by the restaurant." ,schema=@Schema()) @Valid @RequestParam(value = "cuisine", required = false) String cuisine) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ {\n  \"distance\" : 1,\n  \"price\" : 1.4658129805029452,\n  \"name\" : \"name\",\n  \"rating\" : 1,\n  \"cuisine\" : \"cuisine\"\n}, {\n  \"distance\" : 1,\n  \"price\" : 1.4658129805029452,\n  \"name\" : \"name\",\n  \"rating\" : 1,\n  \"cuisine\" : \"cuisine\"\n} ]", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RestaurantsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}

